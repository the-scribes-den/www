name: Repository Setup Workflow

on:
  workflow_dispatch:
    inputs:
      setup_type:
        description: 'Type of setup to perform'
        required: true
        type: choice
        options:
          - full_setup
          - create_docs
          - create_config
          - create_community_files

jobs:
  repository_setup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Create Base Project Structure
        if: ${{ inputs.setup_type == 'full_setup' || inputs.setup_type == 'create_docs' }}
        run: |
          # Create source directories
          mkdir -p src/components
          mkdir -p src/pages
          mkdir -p src/hooks
          mkdir -p src/utils
          mkdir -p src/styles
          mkdir -p src/assets/images
          mkdir -p src/assets/fonts
          
          # Create documentation directory
          mkdir -p docs
          
          # Create test directories
          mkdir -p __tests__
          mkdir -p __tests__/components
          mkdir -p __tests__/pages
      
      - name: Create Configuration Files
        if: ${{ inputs.setup_type == 'full_setup' || inputs.setup_type == 'create_config' }}
        run: |
          # Create .gitignore
          cat > .gitignore << EOL
          # Dependency directories
          node_modules/
          
          # Production build directory
          /build
          /dist
          
          # Environment variables
          .env
          .env.local
          .env.development.local
          .env.test.local
          .env.production.local
          
          # Logs
          npm-debug.log*
          yarn-debug.log*
          yarn-error.log*
          
          # Editor directories and files
          .idea/
          .vscode/
          *.suo
          *.ntvs*
          *.njsproj
          *.sln
          *.sw?
          
          # OS generated files
          .DS_Store
          Thumbs.db
          EOL
          
          # Create package.json
          cat > package.json << EOL
          {
            "name": "the-scribes-den",
            "version": "0.1.0",
            "private": true,
            "description": "A collaborative workspace for writers, editors, and literary enthusiasts",
            "scripts": {
              "dev": "next dev",
              "build": "next build",
              "start": "next start",
              "lint": "next lint",
              "test": "jest",
              "test:watch": "jest --watch",
              "format": "prettier --write .",
              "prepare": "husky install"
            },
            "dependencies": {
              "next": "^14.0.0",
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "tailwindcss": "^3.3.0"
            },
            "devDependencies": {
              "@testing-library/react": "^14.0.0",
              "jest": "^29.6.0",
              "eslint": "^8.45.0",
              "prettier": "^3.0.0",
              "husky": "^8.0.0"
            }
          }
          EOL
          
          # Create ESLint Configuration
          cat > .eslintrc.json << EOL
          {
            "extends": [
              "next/core-web-vitals",
              "prettier"
            ],
            "rules": {
              "no-unused-vars": "warn",
              "react/no-unescaped-entities": "off"
            }
          }
          EOL
          
          # Create Prettier Configuration
          cat > .prettierrc << EOL
          {
            "semi": true,
            "trailingComma": "es5",
            "singleQuote": true,
            "printWidth": 80,
            "tabWidth": 2,
            "useTabs": false
          }
          EOL
          
          # Create Tailwind Config
          cat > tailwind.config.js << EOL
          /** @type {import('tailwindcss').Config} */
          module.exports = {
            content: [
              "./src/**/*.{js,ts,jsx,tsx,mdx}",
              "./pages/**/*.{js,ts,jsx,tsx,mdx}"
            ],
            theme: {
              extend: {
                colors: {
                  'scribes-purple': '#6b5b95',
                  'scribes-cream': '#e1d9c4'
                },
                fontFamily: {
                  'display': ['Playfair Display', 'serif'],
                  'sans': ['Source Sans Pro', 'sans-serif']
                }
              }
            },
            plugins: []
          }
          EOL
      
      - name: Create Community Files
        if: ${{ inputs.setup_type == 'full_setup' || inputs.setup_type == 'create_community_files' }}
        run: |
          # Create README.md
          cat > README.md << EOL
          # The Scribe's Den

          ## Overview
          The Scribe's Den is a collaborative workspace for writers, editors, and literary enthusiasts.

          ## Features
          - Professional writing services
          - Community workshops
          - Editing and proofreading
          - Writing resources

          ## Getting Started
          ### Prerequisites
          - Node.js (v20+)
          - npm or yarn

          ### Installation
          1. Clone the repository
          \`\`\`bash
          git clone https://github.com/the-scribes-den/www.git
          cd www
          \`\`\`

          2. Install dependencies
          \`\`\`bash
          npm install
          # or
          yarn install
          \`\`\`

          3. Run the development server
          \`\`\`bash
          npm run dev
          # or
          yarn dev
          \`\`\`

          ## Contributing
          Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

          ## License
          This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
          EOL
          
          # Create CONTRIBUTING.md
          cat > CONTRIBUTING.md << EOL
          # Contributing to The Scribe's Den

          ## Code of Conduct
          We are committed to providing a welcoming and inspiring community for all. All contributors are expected to follow our [Code of Conduct](CODE_OF_CONDUCT.md).

          ## How to Contribute
          1. Fork the repository
          2. Create your feature branch (\`git checkout -b feature/AmazingFeature\`)
          3. Commit your changes (\`git commit -m 'Add some AmazingFeature'\`)
          4. Push to the branch (\`git push origin feature/AmazingFeature\`)
          5. Open a Pull Request

          ### Pull Request Process
          1. Ensure any install or build dependencies are removed before the end of the layer when doing a build.
          2. Update the README.md with details of changes if applicable.
          3. Your pull request will be merged after review.

          ## Reporting Bugs
          - Use GitHub Issues
          - Provide a clear and descriptive title
          - Describe the steps to reproduce the issue
          - Include expected and actual behavior
          - Add any relevant screenshots or error logs

          ## Feature Requests
          - Open a GitHub Issue
          - Clearly describe the proposed feature
          - Provide context and potential benefits
          - Discuss potential implementation approaches
          EOL
          
          # Create CODE_OF_CONDUCT.md
          cat > CODE_OF_CONDUCT.md << EOL
          # Contributor Covenant Code of Conduct

          ## Our Pledge
          We are committed to providing a friendly, safe, and welcoming environment for all contributors and community members.

          ## Our Standards
          Examples of behavior that contributes to a positive environment include:
          - Using welcoming and inclusive language
          - Being respectful of differing viewpoints and experiences
          - Gracefully accepting constructive criticism
          - Focusing on what is best for the community
          - Showing empathy towards other community members

          Examples of unacceptable behavior include:
          - The use of sexualized language or imagery
          - Trolling, insulting/derogatory comments, and personal or political attacks
          - Public or private harassment
          - Publishing others' private information without explicit permission
          - Other conduct which could reasonably be considered inappropriate in a professional setting

          ## Enforcement
          Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances.

          ## Attribution
          This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [https://www.contributor-covenant.org/version/1/4/code-of-conduct.html](https://www.contributor-covenant.org/version/1/4/code-of-conduct.html)

          [homepage]: https://www.contributor-covenant.org
          EOL
          
          # Create LICENSE (MIT License)
          cat > LICENSE << EOL
          MIT License

          Copyright (c) 2025 The Scribe's Den

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.
          EOL
          
          # Create Issue Templates
          mkdir -p .github/ISSUE_TEMPLATE
          
          # Bug Report Template
          cat > .github/ISSUE_TEMPLATE/bug_report.md << EOL
          ---
          name: Bug report
          about: Create a report to help us improve
          title: '[BUG]'
          labels: bug
          assignees: ''

          ---

          **Describe the bug**
          A clear and concise description of what the bug is.

          **To Reproduce**
          Steps to reproduce the behavior:
          1. Go to '...'
          2. Click on '....'
          3. Scroll down to '....'
          4. See error

          **Expected behavior**
          A clear and concise description of what you expected to happen.

          **Screenshots**
          If applicable, add screenshots to help explain your problem.

          **Environment (please complete the following information):**
           - OS: [e.g. iOS]
           - Browser [e.g. chrome, safari]
           - Version [e.g. 22]

          **Additional context**
          Add any other context about the problem here.
          EOL
          
          # Feature Request Template
          cat > .github/ISSUE_TEMPLATE/feature_request.md << EOL
          ---
          name: Feature request
          about: Suggest an idea for this project
          title: '[FEATURE]'
          labels: enhancement
          assignees: ''

          ---

          **Is your feature request related to a problem? Please describe.**
          A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

          **Describe the solution you'd like**
          A clear and concise description of what you want to happen.

          **Describe alternatives you've considered**
          A clear and concise description of any alternative solutions or features you've considered.

          **Additional context**
          Add any other context or screenshots about the feature request here.
          EOL
      
      - name: Create GitHub Workflows
        if: ${{ inputs.setup_type == 'full_setup' }}
        run: |
          # Create CI workflow
          mkdir -p .github/workflows
          
          # Continuous Integration Workflow
          cat > .github/workflows/ci.yml << EOL
          name: Continuous Integration

          on:
            push:
              branches: [ main, develop ]
            pull_request:
              branches: [ main, develop ]

          jobs:
            build:
              runs-on: ubuntu-latest
              
              steps:
              - uses: actions/checkout@v4
              
              - name: Use Node.js
                uses: actions/setup-node@v4
                with:
                  node-version: '20'
              
              - name: Install Dependencies
                run: npm ci
              
              - name: Lint
                run: npm run lint
              
              - name: Build
                run: npm run build
              
              - name: Test
                run: npm test
          EOL
      
      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Setup repository structure and initial files" || echo "No changes to commit"
          git push
